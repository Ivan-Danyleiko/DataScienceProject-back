name: Deploy Backend to Azure

on:
  push:
    branches: [ lolo ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install pip and upgrade
      run: |
        python -m pip install --upgrade pip
        pip --version

    - name: Install PyTorch and related libraries
      run: |
        pip install torch==2.0.1 torchvision==0.15.2 torchaudio==2.0.2 -f https://download.pytorch.org/whl/cpu/torch_stable.html
        pip install transformers==4.32.0

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH 

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create false

    - name: Remove existing poetry.lock
      run: rm -f poetry.lock

    - name: Generate new poetry.lock
      run: poetry lock

    - name: Install dependencies with Poetry
      run: poetry install --no-interaction --no-root

    - name: Fallback to pip if Poetry fails
      if: failure()
      run: |
        pip install -r <(poetry export --format=requirements.txt --without-hashes)

    - name: Print installed packages
      run: pip list

    - name: Test database connection
      run: |
        python -c "
        from sqlalchemy import create_engine
        from sqlalchemy.exc import SQLAlchemyError
        import os

        try:
            engine = create_engine(os.getenv('SQLALCHEMY_DATABASE_URL'))
            with engine.connect() as connection:
                result = connection.execute('SELECT 1')
                print('Successfully connected to the database')
        except SQLAlchemyError as e:
            print(f'Error connecting to the database: {e}')
            exit(1)
        "

    - name: Set environment variables
      run: |
        echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> $GITHUB_ENV
        echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> $GITHUB_ENV
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> $GITHUB_ENV
        echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> $GITHUB_ENV
        echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> $GITHUB_ENV
        echo "SQLALCHEMY_DATABASE_URL=${{ secrets.SQLALCHEMY_DATABASE_URL }}" >> $GITHUB_ENV
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV
        echo "ALGORITHM=${{ secrets.ALGORITHM }}" >> $GITHUB_ENV
        echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> $GITHUB_ENV
        echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> $GITHUB_ENV
        echo "MAIL_FROM=${{ secrets.MAIL_FROM }}" >> $GITHUB_ENV
        echo "MAIL_FROM_NAME=${{ secrets.MAIL_FROM_NAME }}" >> $GITHUB_ENV
        echo "MAIL_PORT=465" >> $GITHUB_ENV
        echo "MAIL_SERVER=${{ secrets.MAIL_SERVER }}" >> $GITHUB_ENV
        echo "CORS_ORIGINS=${{ secrets.CORS_ORIGINS }}" >> $GITHUB_ENV

    - name: Debug - Print current directory and contents
      run: |
        pwd
        ls -la
        echo "Content of app directory:"
        ls -la app

    - name: Print directory structure
      run: |
        pwd
        ls -R

    - name: Print MAIL_PORT
      run: echo $MAIL_PORT

    - name: Run Alembic migrations
      run: |
        cd app
        alembic upgrade head

    - name: Create startup command file
      run: |
        echo "cd app && gunicorn main:app --bind=0.0.0.0:8000 --timeout 600 --workers 4 --worker-class uvicorn.workers.UvicornWorker" > startup.txt

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'datascienceproject-backend-12345'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_BACKEND }}
        package: .