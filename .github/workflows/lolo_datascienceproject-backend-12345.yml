name: Deploy Backend to Azure

on:
  push:
    branches: [ lolo ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install and upgrade pip
      run: |
        python -m pip install --upgrade pip
        pip --version

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Configure Poetry and install dependencies
      run: |
        poetry config virtualenvs.create false
        poetry install --no-interaction --no-root

    - name: Set environment variables
      run: |
        echo "SQLALCHEMY_DATABASE_URL=${{ secrets.SQLALCHEMY_DATABASE_URL }}" >> $GITHUB_ENV
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV
        echo "ALGORITHM=${{ secrets.ALGORITHM }}" >> $GITHUB_ENV
        echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> $GITHUB_ENV
        echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> $GITHUB_ENV
        echo "MAIL_FROM=${{ secrets.MAIL_FROM }}" >> $GITHUB_ENV
        echo "MAIL_FROM_NAME=${{ secrets.MAIL_FROM_NAME }}" >> $GITHUB_ENV
        echo "MAIL_PORT=465" >> $GITHUB_ENV
        echo "MAIL_SERVER=${{ secrets.MAIL_SERVER }}" >> $GITHUB_ENV
        echo "CORS_ORIGINS=${{ secrets.CORS_ORIGINS }}" >> $GITHUB_ENV

    - name: Verify environment variables
      run: |
        for var in SQLALCHEMY_DATABASE_URL SECRET_KEY ALGORITHM MAIL_USERNAME MAIL_PASSWORD MAIL_FROM MAIL_FROM_NAME MAIL_PORT MAIL_SERVER CORS_ORIGINS
        do
          if [ -z "${!var}" ]; then
            echo "Error: $var is not set"
            exit 1
          else
            echo "$var is set"
          fi
        done

    - name: Test database connection
      run: |
        python - << EOF
        import os
        from sqlalchemy import create_engine, text
        from sqlalchemy.exc import SQLAlchemyError

        db_url = os.getenv('SQLALCHEMY_DATABASE_URL')
        print(f'Attempting to connect to database...')

        try:
            engine = create_engine(db_url)
            with engine.connect() as connection:
                result = connection.execute(text("SELECT 1")).scalar()
                print(f'Successfully connected to the database. Test query result: {result}')
        except SQLAlchemyError as e:
            print(f'SQLAlchemy error: {e}')
            exit(1)
        except Exception as e:
            print(f'Unexpected error: {e}')
            exit(1)
        EOF

    - name: Run Alembic migrations
      run: |
        cd app
        alembic upgrade head

    - name: Create startup command file
      run: |
        echo "gunicorn app.main:app --bind=0.0.0.0:8000 --timeout 600 --workers 4 --worker-class uvicorn.workers.UvicornWorker" > startup.txt

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'datascienceproject-backend-12345'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_BACKEND }}
        package: .

    - name: Get deployment logs
      run: |
        az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
        az webapp log download --name datascienceproject-backend-12345 --resource-group YourResourceGroupName

    - name: Clear Azure Web App deployment cache
      run: |
        az webapp deployment source config-zip --resource-group YourResourceGroupName --name datascienceproject-backend-12345 --src /dev/null