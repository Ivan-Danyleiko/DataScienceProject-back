name: Deploy Backend to Azure

on:
  push:
    branches: [ lolo ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install and configure dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry config virtualenvs.create false
        poetry install --no-interaction --no-root
        poetry add uvicorn
        poetry export -f requirements.txt --output requirements.txt --without-hashes
        pip install -r requirements.txt

    - name: Set environment variables
      run: |
        echo "SQLALCHEMY_DATABASE_URL=${{ secrets.SQLALCHEMY_DATABASE_URL }}" >> $GITHUB_ENV
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV
        echo "ALGORITHM=${{ secrets.ALGORITHM }}" >> $GITHUB_ENV
        echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> $GITHUB_ENV
        echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> $GITHUB_ENV
        echo "MAIL_FROM=${{ secrets.MAIL_FROM }}" >> $GITHUB_ENV
        echo "MAIL_FROM_NAME=${{ secrets.MAIL_FROM_NAME }}" >> $GITHUB_ENV
        echo "MAIL_PORT=465" >> $GITHUB_ENV
        echo "MAIL_SERVER=${{ secrets.MAIL_SERVER }}" >> $GITHUB_ENV
        echo "CORS_ORIGINS=${{ secrets.CORS_ORIGINS }}" >> $GITHUB_ENV

    - name: Run Alembic migrations
      run: |
        cd app
        alembic upgrade head

    - name: Create startup command file
      run: |
        echo "gunicorn app.main:app --bind=0.0.0.0:8000 --timeout 600 --workers 4 --worker-class uvicorn.workers.UvicornWorker" > startup.txt

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Verify Azure Login and clean up old deployments
      run: |
        az account show
        az group list --query "[].name" -o tsv
        az webapp deployment list --name datascienceproject-backend-12345 --resource-group DataScienceProjectGroup --query "[?active==null].id" -o tsv | xargs -I % az webapp deployment delete --name datascienceproject-backend-12345 --resource-group DataScienceProjectGroup --ids %

    - name: Check package size and content
      run: |
        echo "Total package size:"
        du -sh .
        echo "Size of each directory:"
        du -sh */ | sort -hr
        echo "Package content:"
        ls -R
        echo "requirements.txt content:"
        cat requirements.txt

    - name: Check App Service Configuration
      run: |
        az webapp config show --name datascienceproject-backend-12345 --resource-group DataScienceProjectGroup

    - name: Prepare deployment package
      run: |
        mkdir deploy
        cp -r app requirements.txt startup.txt deploy/
        cd deploy
        zip -r ../deploy.zip .

    - name: Check deployment package content
      run: |
        echo "Deployment package content:"
        unzip -l deploy.zip

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'datascienceproject-backend-12345'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_BACKEND }}
        package: ./deploy.zip

    - name: Configure Azure Web App
      run: |
        az webapp config appsettings set --name datascienceproject-backend-12345 --resource-group DataScienceProjectGroup --settings WEBSITE_RUN_FROM_PACKAGE=1
        az webapp config set --name datascienceproject-backend-12345 --resource-group DataScienceProjectGroup --linux-fx-version "PYTHON|3.10"

    - name: Get deployment logs
      if: always()
      run: |
        az webapp log tail --name datascienceproject-backend-12345 --resource-group DataScienceProjectGroup

    - name: Get detailed deployment logs
      if: failure()
      run: |
        az webapp log download --name datascienceproject-backend-12345 --resource-group DataScienceProjectGroup
        unzip -p *.zip